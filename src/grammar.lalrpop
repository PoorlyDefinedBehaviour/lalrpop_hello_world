use std::str::FromStr;
use crate::ast::{Expr, Opcode};

grammar;

Tier<Op, NextTier>: Box<Expr> = {
  <left: Tier<Op, NextTier>> <op: Op> <right: NextTier> => Box::new(Expr::Op(left, op, right)),
  NextTier,
};

List<T>: Vec<T> = {
  <mut xs: (<T> ",")*> <value: T?> => match value {
    None => xs,
    Some(value) => {
      xs.push(value);
      xs
    }
  }
}

pub Exprs = List<Expr>;
pub Expr = Tier<ExprOp, Factor>;

ExprOp: Opcode = {
  "+" => Opcode::Add,
  "-" => Opcode::Sub,
}

Factor = Tier<FactorOp, Term>;

FactorOp: Opcode = {
  "*" => Opcode::Mul,
  "/" => Opcode::Div,
}

Term: Box<Expr> = {
  <n: Num> => Box::new(Expr::Number(n)),
  "(" <Expr> ")"
}

Num: i32 = <s: r"[0-9]+"> => i32::from_str(s).unwrap();
